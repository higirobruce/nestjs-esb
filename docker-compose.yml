version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: esb-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: esb_db
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - esb-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d esb_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # NestJS ESB Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: nestjs-esb
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DB_HOST: db
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: password
      DB_NAME: esb_db
    ports:
      - "4000:4000"
    networks:
      - esb-network
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:4000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching (optional - can be used for rate limiting, caching, etc.)
  redis:
    image: redis:7-alpine
    container_name: esb-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - esb-network
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx reverse proxy (optional - for production load balancing)
  nginx:
    image: nginx:alpine
    container_name: esb-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - esb-network
    depends_on:
      - app
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  esb-network:
    driver: bridge
